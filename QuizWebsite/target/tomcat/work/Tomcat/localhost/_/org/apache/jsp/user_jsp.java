/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2023-08-22 12:01:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dao.UsersDao;
import models.User;
import dao.FriendsDao;
import java.util.List;
import java.util.ArrayList;
import dao.FriendRequestDao;
import models.FriendRequest;

public final class user_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    User user = null;
    List<User> friendsList = new ArrayList<User>();
    String id = request.getParameter("id");
    String userId = (String) request.getAttribute("loggedUser");
    FriendRequestDao friendRequestDao;
    boolean isFriend = false;
    boolean friendRequestSent = false;
    if(id != null){
        UsersDao users = (UsersDao) application.getAttribute("users");
        FriendsDao friends = (FriendsDao) application.getAttribute("friends");
        friendRequestDao = (FriendRequestDao) application.getAttribute("friend_requests");
        user = users.getUser(Integer.parseInt(id));
        List<Integer> friendsId = friends.getFriends(Integer.parseInt(id));
        for(int fId : friendsId){
            friendsList.add(users.getUser(String.valueOf(fId)));
            if(fId == Integer.parseInt(userId)) isFriend = true;
        }
        if(!isFriend) friendRequestSent = friendRequestDao.getFriendRequests(userId).contains(id);
    }else{
        request.setAttribute("errorMessage", "Error: User not found!");
        request.getRequestDispatcher("/error.jsp").forward(request, response);
    }

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1, h2 {\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        ul {\r\n");
      out.write("            list-style-type: none;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        li {\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button {\r\n");
      out.write("            background-color: #0056b3;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 6px 10px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #2980b9;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        p {\r\n");
      out.write("            font-style: italic;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <title>\r\n");
      out.write("        ");
      out.print( user.getUsername() );
      out.write("\r\n");
      out.write("    </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>");
      out.print( user.getUsername() );
      out.write("</h1>\r\n");
      out.write("    ");
 if (!isFriend & !friendRequestSent) { 
      out.write("\r\n");
      out.write("        <button id=\"sendFriendRequestBtn\" onclick=\"sendFriendRequest()\">Send Friend Request</button>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("    ");
 if (isFriend) { 
      out.write("\r\n");
      out.write("        <p>");
      out.print( user.getUsername() );
      out.write(" is your friend</p>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("    ");
 if ("admin".equals(user.getUserType())) { 
      out.write("\r\n");
      out.write("        <button id=\"removeAccountBtn\" onclick=\"removeAccount()\">Remove Account</button>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("    <button id=\"removeAccountBtn\" onclick=\"removeAccount()\">Remove Account</button>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        function sendFriendRequest() {\r\n");
      out.write("            // Perform the AJAX request\r\n");
      out.write("            var xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function() {\r\n");
      out.write("                if (xhr.readyState === 4) {\r\n");
      out.write("                    if (xhr.status === 200) {\r\n");
      out.write("                        // Request was successful\r\n");
      out.write("                        var response = JSON.parse(xhr.responseText);\r\n");
      out.write("                        if (response.success) {\r\n");
      out.write("                            alert(\"Friend request sent successfully!\");\r\n");
      out.write("                            ");

                                // Retrieve the FriendRequestDao from the application scope
                                FriendRequestDao friendRequests = (FriendRequestDao) application.getAttribute("friend_requests");

                                // Create a new FriendRequest object
                                FriendRequest newFriendRequest = new FriendRequest(userId, id);

                                // Call the createFriendRequest method and add the new friend request
                                friendRequests.createFriendRequest(newFriendRequest);
                            
      out.write("\r\n");
      out.write("                        } else {\r\n");
      out.write("                            alert(\"Error sending friend request: \" + response.message);\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        // Request failed\r\n");
      out.write("                        alert(\"An error occurred while sending the friend request \" + xhr.status);\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            var url = \"user?id=2\";\r\n");
      out.write("\r\n");
      out.write("            xhr.open(\"POST\", url, true);\r\n");
      out.write("            xhr.send(null);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function removeAccount() {\r\n");
      out.write("            // Perform the logic to remove the account\r\n");
      out.write("            var confirmRemove = confirm(\"Are you sure you want to remove this account?\");\r\n");
      out.write("            if (confirmRemove) {\r\n");
      out.write("                var xhr = new XMLHttpRequest();\r\n");
      out.write("                xhr.onreadystatechange = function() {\r\n");
      out.write("                    if (xhr.readyState === 4) {\r\n");
      out.write("                        if (xhr.status === 200) {\r\n");
      out.write("                            // Request was successful\r\n");
      out.write("                            var response = JSON.parse(xhr.responseText);\r\n");
      out.write("                            if (response.success) {\r\n");
      out.write("                                alert(\"Account removed successfully!\");\r\n");
      out.write("                            } else {\r\n");
      out.write("                                alert(\"Error removing account: \" + response.message);\r\n");
      out.write("                            }\r\n");
      out.write("                        } else {\r\n");
      out.write("                            // Request failed\r\n");
      out.write("                            alert(\"An error occurred while removing the account \" + xhr.status);\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                };\r\n");
      out.write("\r\n");
      out.write("                var url = \"removeUser?id=\" + ");
      out.print( id );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("                xhr.open(\"POST\", url, true);\r\n");
      out.write("                xhr.send(null);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    <h2>Friends</h2>\r\n");
      out.write("    <ul>\r\n");
      out.write("        ");
 for (User friend : friendsList) { 
      out.write("\r\n");
      out.write("        <li>\r\n");
      out.write("            <a href=\"${pageContext.request.contextPath}/user?id=");
      out.print( friend.getId() );
      out.write('"');
      out.write('>');
      out.print( friend.getUsername() );
      out.write("</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("    <h2>");
      out.print( user.getUsername() );
      out.write("'s Activity</h2>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
